static constexpr std::size_t max_cache_blocks = 6;
static constexpr std::size_t cache_bits_unit = 64;
static constexpr int segment_length = 76;
static constexpr bool constant_block_count = false;
static constexpr int collapse_factor = 64;
static constexpr int e_min = -1074;
static constexpr int k_min = -214;
static constexpr int cache_bit_index_offset_base = 964;
static constexpr int cache_block_count_offset_base = 28;

static constexpr std::uint64_t cache[] = {
	0xc795830d75038c1d,
	0xd59df5b9ef6a2417,
	0xfeb13da03da3a72f,
	0xa1be04416f774ca1,
	0x85f538987c4d8ab3,
	0xde9c74098f2c4f21,
	0x6557ca48db07a0b4,
	0x3624edab9224f3fa,
	0xcc249c832997969a,
	0xf881dd24a9490435,
	0xd21cc1f42181d822,
	0xd292253741544b1e,
	0xc070fb555f3ae9cd,
	0xd667388bb5d80f11,
	0x6f5d3e14a823683c,
	0x8dba6f7d12a4670c,
	0x1228cbed77672fe2,
	0x26b047f2f1dba1ec,
	0x39d4a22fafd3b8e5,
	0x7d2606be8f9f9d69,
	0xc3e52bfca1b77074,
	0xf717ff6d3d05837d,
	0x52757bfaf43a0990,
	0xe1c53a3404eb3e32,
	0xd70be1d88abc74bc,
	0x2fba0d6227b856e8,
	0xa81f606fbc2f18a1,
	0xecaf8cc74e28ed28,
	0x1f44aaef8a1a5ce0,
	0xe8fbbbbe454fa246,
	0x54f3da0c01092b10,
	0x3a3c88aa64156f94,
	0xbf9f3846d1891263,
	0xb4499fde762d5a2e,
	0xa49984de00a14a88,
	0x9e9773e3c16e08f8,
	0x5f4dabbc3d426851,
	0x213b5a1b2683fe10,
	0xcfb6434ba42e4d56,
	0x664be1a3c7ff1284,
	0x56f0fb1705e5fee3,
	0x8e007bafa882f91a,
	0xfcb441072ce66d79,
	0x739727f3b13fd95a,
	0xecd25743d4788d55,
	0xe04d5ce009daf310,
	0x7a7ed61e1252b38e,
	0x97c12ad228101971,
	0xc8f99335e063566e,
	0x1ff37735b4e59984,
	0x00a95d35eac354f3,
	0x4215cd46e417018f,
	0xb1dc73a19a5a3743,
	0xe8da836e84bce980,
	0x611c7329781dc4d2,
	0xdda2b44f7f9ca6e7,
	0xfc54a476efe25a67,
	0x783fad80aaea25fc,
	0x2ee0b6c68be2c365,
	0x97bb899503c37877,
	0x71f8a426e142a90a,
	0x0a111948aa20daab,
	0xabd53158b4bee362,
	0x2b460d13808c7ba3,
	0x84b34b8fd4e6449b,
	0xdfe625736a4520d8,
	0x1000568c1967a2af,
	0x11bbaba0703d232e,
	0xdb4307c03d64a104,
	0x57de7bb566fc6f34,
	0x8d0a4730d418e715,
	0xd08442268fb658a4,
	0xab37633d7abfec56,
	0x095c3aaa0dd69084,
	0x8b031cb8efcfcecc,
	0x726122160bca6e87,
	0x82909bde51437b9e,
	0x18fec9ae38fd6bcd,
	0x0c0ece2e759b726d,
	0xde6685baa0d1682f,
	0x1c7b6bdb1899f8d1,
	0x29e6a5f93f6281f1,
	0x88b98c5e9256daab,
	0xbeab048366e6a0b0,
	0x5577249aa4ce1eba,
	0xa13bfeb382d4458d,
	0x0c3b3e6c299e5f12,
	0x19fe581d0189ef2b,
	0xc58936f302faa732,
	0xdafcd67a0b5fec62,
	0x73bc103b1f883f8c,
	0x82d2cbbf338f824d,
	0x405744ff1c9bf1ae,
	0x8c12f8199b4271f0,
	0x1c709f8fd90b9016,
	0xb9fefbfe4bc9efe2,
	0x3b3fa9caabe5cbb0,
	0x550aae6e704ff31c,
	0xd79f0be8277ef733,
	0xf9610f9ed2ca3b49,
	0x362f4bf27277e4b6,
	0xda3a27d731b60963,
	0xd0299bf96a011bd3,
	0x99fb6af5fb75cdcc,
	0xeacb99dafb50e45d,
	0xbca872b6c386c6d3,
	0x181b2eed1490f082,
	0x0a4e88121a2ba4ec,
	0x8d37b83773124d45,
	0xcb254152635fd290,
	0x22bce8ade391f4b1,
	0xa7fa93d3b5825776,
	0x6333a751b80a7489,
	0xfcd114dcdf25eac8,
	0x6774e1afe756223c,
	0x02cd432b967ab32f,
	0x11c5ec68f2c09c73,
	0x128aab6a0212292f,
	0x3f341770fba7cf3e,
	0x5274792892fe09f1,
	0x884cdcfa09111cea,
	0x8b3f4ed44270fc2d,
	0x84423b816ee82b19,
	0xa2947635a9d218ba,
	0x7cd4a1f590f12fb0,
	0x9b3cc19bd9ddb8be,
	0xd8d025fe97e2552d,
	0x392f39a9cf584ddb,
	0xf299c1bf79000000
};

struct multiplier_index_info {
	std::uint16_t first_cache_bit_index;
	std::uint16_t cache_bit_index_offset;
	std::uint16_t cache_block_count_index_offset;
};

static constexpr multiplier_index_info multiplier_index_info_table[] = {
	{0, 0, 0},
	{365, 618, 10},
	{983, 1488, 20},
	{1850, 2608, 30},
	{2921, 3931, 40},
	{2954, 4216, 50},
	{3163, 4678, 60},
	{3549, 5316, 70},
	{4111, 6131, 76},
	{4850, 6887, 82},
	{5530, 7561, 88},
	{6128, 8166, 94},
	{6657, 8695, 100},
	{7110, 9148, 106},
	{7487, 9523, 112},
	{7786, 9824, 118},
	{8011, 10049, 124},
	{8160, 10197, 130},
	{8232, 0, 0}
};

static constexpr std::uint8_t cache_block_counts[] = {
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x56,
	0x55,
	0x55,
	0x55,
	0x55,
	0x55,
	0x55,
	0x55,
	0x45,
	0x23,
	0x61,
	0x66,
	0x45,
	0x23,
	0x61,
	0x66,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x66,
	0x66,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x66,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x66,
	0x66,
	0x45,
	0x23,
	0x61,
	0x66,
	0x66,
	0x45,
	0x23,
	0x61,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x56,
	0x34,
	0x12,
	0x56,
	0x34,
	0x12,
	0x45,
	0x23,
	0x41,
	0x23,
	0x31,
	0x12,
	0x12
};