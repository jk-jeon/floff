static constexpr std::size_t max_cache_blocks = 6;
static constexpr std::size_t cache_bits_unit = 64;
static constexpr int segment_length = 76;
static constexpr bool constant_block_count = false;
static constexpr int collapse_factor = 64;
static constexpr int e_min = -1074;
static constexpr int k_min = -214;
static constexpr int cache_bit_index_offset_base = 964;
static constexpr int cache_block_count_offset_base = 28;

static constexpr std::uint64_t cache[] = {
	0xc795830d75038c1d,
	0xd59df5b9ef6a2417,
	0xfeb13da03da3a72f,
	0xa1be04416f774ca1,
	0x85f538987c4d8ab3,
	0xde9c74098f2bafa8,
	0x0c4f216557ca48db,
	0x07a0b43624edab92,
	0x24f3facc249c8329,
	0x97969af881dd24a9,
	0x490435d21cc1f421,
	0x81d822d292253741,
	0x544b1ec070fb555f,
	0x3ae9cdd667388bb5,
	0xd80f116f5d3e14a8,
	0x23683c8dba6e2709,
	0x92df44a919c3048a,
	0x32fb5dd9cbf889ac,
	0x11fcbc76e87b0e75,
	0x288bebf4ee395f49,
	0x81afa3e7e75a70f9,
	0x4aff286ddc1d3dc5,
	0xffdb4f4160df549d,
	0x5efebd0e82643871,
	0x4e8d013acf8cb5c2,
	0xf87622af1d2f0bee,
	0x835889ee15ba2a07,
	0xd81bef0bc6287b2b,
	0xe331d38a3b4a07d1,
	0x2abbe2869737b831,
	0x770747ddddf22a7d,
	0x1232a79ed0600849,
	0x5881d1e4455320ab,
	0x7ca5fcf9c2368c48,
	0x931da24cfef3b16a,
	0xd17524cc26f0050a,
	0x5444f4bb9f1e0b70,
	0x47c2fa6d5de1ea13,
	0x428909dad0d9341f,
	0xf0867db21a5d2172,
	0x6ab3325f0d1e3ff8,
	0x9422b787d8b82f2f,
	0xf71c7003dd7d4417,
	0xc8d7e5a208396733,
	0x6bcb9cb93f9d89fe,
	0xcad76692ba1ea3c4,
	0x6aaf026ae7004d22,
	0x36bcc41e9fb58784,
	0x94ace3a5f04ab48a,
	0x04065c723e64cd78,
	0x18d59b87fcddcd6d,
	0x396661002a574d7a,
	0xb0d53cd0857351b9,
	0x05c063ec771ce866,
	0x968dd0fa36a0dba1,
	0x2f3a6018471cca5e,
	0x077134b768ad13df,
	0xe729b9ff15291dbb,
	0xf89699de0feb602a,
	0xba897f0bb82db1a2,
	0xf8b0d965eee26540,
	0xf0de1ddc7e2909b8,
	0x50aa42828446522a,
	0x8836aaeaf54c562d,
	0x2fb8d88ad18344e0,
	0x231ee8e12cd2e3f5,
	0x399126f7f9895cda,
	0x914836040015a306,
	0x59e8abc46eeae81c,
	0x0f48cbb6d0c1f00f,
	0x59284115f79eed59,
	0xbf1bcd234291cc35,
	0x0639c574211089a3,
	0xed96292acdd8cf5e,
	0xaffb1582570eaa83,
	0x75a42122c0c72e3b,
	0xf3f3b31c98488582,
	0xf29ba1e0a426f794,
	0x50dee7863fb26b8e,
	0x3f5af34303b38b9d,
	0x66dc9b7799a16ea8,
	0x345a0bc71edaf6c6,
	0x267e344a79a97e4f,
	0xd8a07c622e6317a4,
	0x95b6aaefaac120d9,
	0xb9a82c155dc926a9,
	0x3387aea84efface0,
	0xb51163430ecf9b0a,
	0x6797c4867f960740,
	0x627bcaf1624dbcc0,
	0xbea9ccb6bf359e82,
	0xd7fb189cef040ec7,
	0xe20fe320b4b2efcc,
	0xe3e0935015d13fc7,
	0x26fc6ba304be0666,
	0xd09c7c071c27e3f6,
	0x42e405ae7fbeff92,
	0xf27bf88ecfea72aa,
	0xf972ec1542ab9b9c,
	0x13fcc735e7c2fa09,
	0xdfbdccfe5843e7b4,
	0xb28ed24d8bd2fc9c,
	0x9df92db68e89f5cc,
	0x6d8258f40a66fe5a,
	0x8046f4e67edabd7e,
	0xdd73733ab2e676be,
	0xd439176f2a1cadb0,
	0xe1b1b4c606cbbb45,
	0x243c208293a20486,
	0x8ae93b234dee0ddc,
	0xc4935172c9505498,
	0xd7f4a408af3a2b78,
	0xe47d2c69fea4f4ed,
	0x6095dd98cce9d46e,
	0x029d227f34453737,
	0xc97ab219dd386bf9,
	0xd5888f00b350cae5,
	0x9eaccbc4717b1a3c,
	0xb0271cc4a2aada80,
	0x848a4bcfcd05dc3e,
	0xe9f3cf949d1e4a24,
	0xbf827c6213373e82,
	0x44473aa2cfd3b510,
	0x9c3f0b61108ee05b,
	0xba0ac668a51d8d6a,
	0x74862e9f35287d64,
	0x3c4bec26cf3066f6,
	0x776e2fb634097fa5,
	0xf8954b4e4bce6a73,
	0xd61376fca6706fde,
	0x4000000000000000,
	0x0000000000000000
};

struct multiplier_index_info {
	std::uint16_t first_cache_bit_index;
	std::uint16_t cache_bit_index_offset;
	std::uint16_t cache_block_count_index_offset;
};

static constexpr multiplier_index_info multiplier_index_info_table[] = {
	{0, 0, 0},
	{389, 642, 8},
	{1033, 1538, 20},
	{1927, 2685, 36},
	{3011, 4021, 56},
	{3044, 4306, 65},
	{3253, 4768, 77},
	{3639, 5406, 92},
	{4201, 6221, 106},
	{4940, 6977, 118},
	{5620, 7651, 129},
	{6218, 8256, 139},
	{6747, 8785, 148},
	{7200, 9238, 156},
	{7577, 9613, 162},
	{7876, 9914, 167},
	{8101, 10139, 171},
	{8250, 10287, 174},
	{8322, 0, 0}
};

static constexpr std::uint8_t cache_block_counts[] = {
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x56,
	0x55,
	0x55,
	0x55,
	0x55,
	0x55,
	0x55,
	0x55,
	0x45,
	0x23,
	0x61,
	0x66,
	0x45,
	0x23,
	0x61,
	0x66,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x66,
	0x66,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x66,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x66,
	0x66,
	0x45,
	0x23,
	0x61,
	0x66,
	0x66,
	0x45,
	0x23,
	0x61,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x56,
	0x34,
	0x12,
	0x56,
	0x34,
	0x12,
	0x45,
	0x23,
	0x41,
	0x23,
	0x31,
	0x12,
	0x12
};