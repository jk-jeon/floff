static constexpr std::size_t max_cache_blocks = 6;
static constexpr std::size_t cache_bits_unit = 64;
static constexpr int segment_length = 80;
static constexpr bool constant_block_count = false;
static constexpr int collapse_factor = 64;
static constexpr int e_min = -1074;
static constexpr int k_min = -210;
static constexpr int cache_bit_index_offset_base = 964;
static constexpr int cache_block_count_offset_base = 27;

static constexpr std::uint64_t cache[] = {
	0xc795830d75038c1d,
	0xd59df5b9ef6a2417,
	0xfeb13da03da3a72f,
	0xa1be04416f774ca1,
	0x85f538987c4d8ab3,
	0xde9c74098f2bafaa,
	0xa14c221ad536f7af,
	0x67d5fe0c0a0ff7f3,
	0x0de9d31958870e22,
	0xc5ac162d4339a052,
	0xd0d1d97e0d614173,
	0x802b4105b336f99f,
	0xb2d984f4f566db5f,
	0xb533e21c804345bd,
	0x1f326438a9241b9f,
	0x9c5ef58109bb5397,
	0xa8df5efabc5979c8,
	0xfca8d3ffa1ef463c,
	0x1d897747ed9d851e,
	0x7e089e51c5849436,
	0x84991b0e100065e9,
	0x5b739863e3229abf,
	0x20ad3b847a221d5b,
	0x54cfe86e61fe7942,
	0x52100905ac4685b8,
	0xc9d071c69307a1b5,
	0x443f79e206bc53fe,
	0xad0d5e38f3213d42,
	0xc7e9ffc57eb87287,
	0x899f2e376c6750de,
	0x277c9dee7a4ad4b8,
	0x1eef92c7ccd0b1ed,
	0xa88809578b3c883f,
	0xacac074718d3a861,
	0xc2e7a8075f6f48b7,
	0xf7575b91c1228c74,
	0xa6156587fb4d33e7,
	0x10f12886b5f4e7d3,
	0xf1f8c78ab01e4c8e,
	0x2ca5131d29e6d9bc,
	0x31e1fa72ff00a896,
	0x0d72272b42d76b8d,
	0x4ed9b2e8caa13ccd,
	0xee30cdb21a96c453,
	0xcfb26c0c4ad47994,
	0xa33653a0ffed981c,
	0x1d6019d9050b2bd3,
	0xf70f4cd944754727,
	0xcb2734119d3b7a9a,
	0xa51823e34a7eedeb,
	0xd4b46f0599fd4151,
	0x0331d72aeaf71658,
	0x6ff327d536b74698,
	0xfa475791a569d10f,
	0x96e017d694487bcd,
	0x671a0192ea53fcdf,
	0x4f028faa0591cee1,
	0x10848f82d5dc343b,
	0xf046f580a6dc57f2,
	0x388f0f4ecd04a7c9,
	0x28069cf3cb733ef1,
	0x8cece59cf233b0f6,
	0x711334bcda45f1d3,
	0x625ba277930142f2,
	0x9981c43f8a015832,
	0x9b927206988a3207,
	0x710462b1f77da9a0,
	0xb36caa2112ab8b91,
	0x9b31ca21b110d5d1,
	0x70c5cb8ef4ef21e0,
	0xbfff827fd7fca291,
	0x6083c84685eb1511,
	0xd86ad0063cca31d8,
	0xbb805953a1297b88,
	0xf63d7956e0d98578,
	0x80976336e47a55a4,
	0xe26491b9c8dbbfc5,
	0x405b99dac54b48d5,
	0xf5033bae4a2c613a,
	0xbce5f30e3c3ae7a5,
	0x9f0efb302818554f,
	0x83412b3c79e33e50,
	0x856a8777d6468b5d,
	0x9bc1690affcda2f1,
	0xda1dfde453a3d469,
	0x826c9a87361f35f8,
	0x79c1e1fb5e140cbb,
	0xd2e5d0703d1e4d7b,
	0x4e263e53ab13676f,
	0xbae3ec77c07755a8,
	0xc81109b422e30769,
	0xfac9d2aca5844f05,
	0x87a7e9d9bb1d9c4f,
	0x8c8f408fac935e4a,
	0x635e65532989419f,
	0x4efcc4d7ba319b9f,
	0xdf2809505710bd22,
	0xb5e4edb89cda5b59,
	0x12ad5b9910fe8ad6,
	0xf8e45c246285362a,
	0x972bc5046accbe70,
	0xb4de428c28ebec9d,
	0x02e47593c24145ee,
	0xaa90a540c28355e2,
	0x0367ac12d7fdaaeb,
	0xe2187d19d06dde15,
	0x649e162610192e14,
	0xaf30e9d3c4b190b8,
	0xbd04d772b36d826a,
	0x2d6275f5b7343bff,
	0x7ca39b6c06ae7414,
	0x227c995776fbefa9,
	0x95a4627d7d96416f,
	0x1db95b9aed4e0161,
	0x611d81ca92cc44fd,
	0x8c42c7adfa974d94,
	0x729442cc23490c8f,
	0x1ba514d154d1a3a5,
	0x4f957b16e69a7395,
	0xad7d0af4f070aa2c,
	0x7cbef9d2c3f5c30b,
	0x66ec52ce16d31ef2,
	0xe4dd4f9ca6b07c1f,
	0xe3ffcc165d60011d,
	0x7955021b42f8a908,
	0x7d3bbcd24c62b3b0,
	0xe824b0a990000000,
	0x0000000000000000
};

struct multiplier_index_info {
	std::uint16_t first_cache_bit_index;
	std::uint16_t cache_bit_index_offset;
	std::uint16_t cache_block_count_index_offset;
};

static constexpr multiplier_index_info multiplier_index_info_table[] = {
	{0, 0, 0},
	{382, 648, 9},
	{1028, 1560, 22},
	{1939, 2736, 39},
	{3062, 4125, 60},
	{3132, 4461, 70},
	{3388, 4983, 84},
	{3830, 5690, 98},
	{4457, 6494, 111},
	{5181, 7217, 123},
	{5824, 7860, 134},
	{6387, 8425, 143},
	{6872, 8910, 151},
	{7277, 9315, 158},
	{7602, 9639, 164},
	{7846, 9884, 168},
	{8011, 10049, 171},
	{8096, 10133, 173},
	{8100, 0, 0}
};

static constexpr std::uint8_t cache_block_counts[] = {
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x66,
	0x45,
	0x23,
	0x61,
	0x66,
	0x66,
	0x66,
	0x45,
	0x23,
	0x61,
	0x66,
	0x66,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x66,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x66,
	0x66,
	0x45,
	0x23,
	0x61,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x45,
	0x23,
	0x61,
	0x45,
	0x23,
	0x41,
	0x23,
	0x31,
	0x12,
	0x12,
	0x01
};