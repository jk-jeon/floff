static constexpr std::size_t max_cache_blocks = 6;
static constexpr std::size_t cache_bits_unit = 64;
static constexpr int segment_length = 80;
static constexpr bool constant_block_count = false;
static constexpr int collapse_factor = 64;
static constexpr int e_min = -1074;
static constexpr int k_min = -211;
static constexpr int cache_bit_index_offset_base = 967;
static constexpr int cache_block_count_offset_base = 27;

static constexpr std::uint64_t cache[] = {
	0x9faacf3df73609b1,
	0x77b191618c54e9ac,
	0xcbc0fe19cae9528c,
	0x8164d034592c3d4e,
	0x04c42d46c9d7a229,
	0x7ee39007a5bc8cc3,
	0x5469cf7bb8b25e57,
	0x2effce010198cb81,
	0x642eb5bc0d8169e0,
	0x91356aed1f5cd514,
	0xe1c8f30156868b8c,
	0xd1201a2b857f5cc5,
	0x15c07ee55715eff8,
	0x8530360cd386f94f,
	0xeb706c10ea02c329,
	0x3cb22680f921f59e,
	0x3231912d5bf60e61,
	0x0e1fff697ed6c695,
	0xa8bed97c2f3b63fc,
	0xda96e93c07538a6d,
	0xc1c4e34ccd6fdbc5,
	0x85c09fd1d0f79834,
	0x485f3a5d03622bba,
	0xe640b09cca5b9d50,
	0x19a80913a40927a9,
	0x4d82d751a5cf886d,
	0x325c9cd793b9977b,
	0x4896c18501fb9e0c,
	0xa9993bfdf3ea7275,
	0xcb7d257a3ee7c9d8,
	0xcbf8fdb78849a5f9,
	0x6de98520472bdd03,
	0x36efd14b69b311de,
	0x694fa387dcf3e78f,
	0xdccfbfc61d1662ef,
	0xbe3a4d4104fb75a2,
	0x289ccaebae5c6d2d,
	0x436915952987fa63,
	0x830446728505ab75,
	0x3ad8772923e4e0c0,
	0xca946600436f3894,
	0x0faae7895e3885f0,
	0xadf6b773b1ebf8e0,
	0x52473dd5e8218647,
	0x5e6b5121ca3b747c,
	0x217399923cd80bc0,
	0x0a56ced144bb2f9f,
	0xb856e82eea863c1f,
	0x5cdae42f9562104d,
	0x3fa421962c8c4241,
	0x63451ff73769a3d2,
	0xb0895649e11affd6,
	0xe5dd7be415e5d3ef,
	0x282a242e818f1668,
	0xc8a86da5faf0b5cc,
	0xf5176ecc7cbb19db,
	0x2a9a282e49b4da0e,
	0x59e22f9ed2cb3a4b,
	0xc010afa26505a7e7,
	0xee47b3ab83a99c3e,
	0xc7eafae5fa385ec2,
	0x3ec747e06293a148,
	0x4b8a8260baf424a7,
	0x63079a1ac7709a4e,
	0x7fd0cd567aa4a0fa,
	0x6909d0e0cfc6ce8d,
	0xe0c965770d1491dd,
	0xa6d4449e3a3e13ea,
	0x73e06d2253c6b584,
	0x9f95a4b69679998d,
	0x0cc8cc76a8234060,
	0xd3da311bb4fc0aae,
	0x670614382f45f33c,
	0x21f68425f4189fbf,
	0x557ce28d58d9a8bd,
	0x1f16d908907d0a0e,
	0x929415f993b9a2c2,
	0x95e0878748988052,
	0xc4a104701f794a31,
	0xe7d2d2b0c3c31b19,
	0x1e6a68d5574b3d9d,
	0x5727ec70c7681154,
	0xe4b2adae8ac5259e,
	0x1cefff5ed639205f,
	0xf9410ba5daeb3af5,
	0x21b0ad30acb4b8d2,
	0xd324604028bf6fac,
	0x349a5d2dc4bdc6e0,
	0xc77223714aff22d9,
	0x5b18ce4aabb5b369,
	0xb8a6d609b15ecab7,
	0x2111dbce86023643,
	0x2a5717a571b96b6c,
	0x8039783af28427bf,
	0x5bbadd6a1a3fb931,
	0xe8564a7a3e3ff2dc,
	0xd0868939e541158e,
	0xc57d0b8a8af06dde,
	0xf1706d329def96c1,
	0xbe74f435713bb7d5,
	0x8dcdaef5bfb0242c,
	0x73b5a1c8c8ec33c7,
	0x4ab726d9dac95550,
	0x210cf3b3ddfa00ae,
	0x559d5e65eefbfa04,
	0xe5d1f67c5f9de0ec,
	0x6ad4699ea2d0efd6,
	0x9590c0f05024f29a,
	0x917d5715e6e20913,
	0xb13124a40bffe5ba,
	0x5248ce22e40406e5,
	0xb844b16596551ded,
	0xad4c4c5140496c58,
	0x458562ae335689b6,
	0x269441e13a195ad3,
	0x7a5e32a8baf53ea8,
	0x6d1469edb474b5f6,
	0xe87b554829f6ee5b,
	0xbf824a42bae3bdef,
	0xed12ec6937744feb,
	0x2ca544e624e048f9,
	0x1bab8d5ee0c61285,
	0x8863eaef018d32d9,
	0x98f37ac46669f7ea,
	0xa9a0573cb5501b2b,
	0xf25c3a8e08a5694d,
	0x42355a8000000000,
	0x0000000000000000
};

struct multiplier_index_info {
	std::uint16_t first_cache_bit_index;
	std::uint16_t cache_bit_index_offset;
	std::uint16_t cache_block_count_index_offset;
};

static constexpr multiplier_index_info multiplier_index_info_table[] = {
	{0, 0, 0},
	{377, 643, 9},
	{1020, 1551, 22},
	{1924, 2721, 39},
	{3046, 4109, 60},
	{3114, 4443, 70},
	{3368, 4962, 84},
	{3807, 5667, 98},
	{4432, 6473, 111},
	{5158, 7199, 123},
	{5804, 7845, 134},
	{6370, 8411, 143},
	{6856, 8896, 151},
	{7261, 9302, 158},
	{7587, 9628, 164},
	{7833, 9874, 168},
	{7999, 10039, 171},
	{8084, 10124, 173},
	{8089, 0, 0}
};

static constexpr std::uint8_t cache_block_counts[] = {
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x66,
	0x45,
	0x23,
	0x61,
	0x66,
	0x66,
	0x66,
	0x45,
	0x23,
	0x61,
	0x66,
	0x66,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x66,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x66,
	0x66,
	0x45,
	0x23,
	0x61,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x56,
	0x34,
	0x12,
	0x66,
	0x45,
	0x23,
	0x61,
	0x45,
	0x23,
	0x41,
	0x23,
	0x31,
	0x12,
	0x12,
	0x01
};